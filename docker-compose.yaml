version: '3.8'

services:
  # PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: ${POSTGRES_CONTAINER}
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - '${POSTGRES_PORT}:5432'
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./migrations/temporal-init.sql:/docker-entrypoint-initdb.d/01-temporal-init.sql:ro
      - ./migrations/init.sql:/docker-entrypoint-initdb.d/02-init.sql:ro
      - ./migrations/seed.sql:/docker-entrypoint-initdb.d/03-seed.sql:ro
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}']
      interval: 10s
      timeout: 5s
      retries: 10

  # Temporal Server
  temporal:
    image: temporalio/auto-setup:${TEMPORAL_VERSION}
    container_name: ${TEMPORAL_CONTAINER}
    environment:
      - DB=postgresql
      - DB_PORT=${POSTGRES_PORT}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PWD=${POSTGRES_PASSWORD}
      - POSTGRES_SEEDS=${POSTGRES_HOST}
      - DBNAME=${TEMPORAL_DBNAME}
      - VISIBILITY_DBNAME=${TEMPORAL_VISIBILITY_DBNAME}
      - POSTGRES_VISIBILITY_USER=${POSTGRES_USER}
      - POSTGRES_VISIBILITY_PWD=${POSTGRES_PASSWORD}
    ports:
      - '${TEMPORAL_PORT}:7233'
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - temporal_data:/var/lib/temporal

  # Temporal Web UI (опционально)
  temporal-web:
    image: temporalio/web:${TEMPORAL_WEB_VERSION}
    container_name: ${TEMPORAL_WEB_CONTAINER}
    environment:
      - TEMPORAL_GRPC_ENDPOINT=temporal:${TEMPORAL_PORT}
      - TEMPORAL_PERMIT_WRITE_API=true
    ports:
      - '${TEMPORAL_WEB_PORT}:8088'
    depends_on:
      temporal:
        condition: service_started

  # OrderFlow Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: ${APP_CONTAINER}
    environment:
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - TEMPORAL_HOST=${TEMPORAL_HOST}
      - TEMPORAL_PORT=${TEMPORAL_PORT}
      - APP_ENV=${APP_ENV}
      - TEMPORAL_ADDRESS=temporal:7233
    ports:
      - '${APP_PORT}:8080'
    depends_on:
      postgres:
        condition: service_healthy
      temporal:
        condition: service_started
    restart: unless-stopped
    healthcheck:
      test:
        [
          'CMD',
          'wget',
          '--no-verbose',
          '--tries=1',
          '--spider',
          'http://localhost:8080/health',
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

volumes:
  postgres_data:
  temporal_data:
