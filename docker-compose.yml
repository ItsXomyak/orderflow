version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: orderflow-postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - '${POSTGRES_PORT}:5432'
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./migrations:/docker-entrypoint-initdb.d
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U orderflow -d orderflow']
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for Temporal
  redis:
    image: redis:7-alpine
    container_name: orderflow-redis
    ports:
      - '${REDIS_PORT}:6379'
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 10s
      timeout: 5s
      retries: 5

  # Temporal Server
  temporal:
    image: temporalio/auto-setup:1.22.3
    container_name: orderflow-temporal
    environment:
      - DB=${DB}
      - DB_PORT=${DB_PORT}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PWD=${POSTGRES_PWD}
      - POSTGRES_SEEDS=${POSTGRES_SEEDS}
      - DYNAMIC_CONFIG_FILE_PATH=${DYNAMIC_CONFIG_FILE_PATH}
    ports:
      - '7233:7233'
      - '8233:8233'
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./temporal-config:/etc/temporal/config/dynamicconfig

  # Temporal Web UI
  temporal-web:
    image: temporalio/web:1.15.0
    container_name: orderflow-temporal-web
    environment:
      - TEMPORAL_GRPC_ENDPOINT=${TEMPORAL_GRPC_ENDPOINT}
      - TEMPORAL_PERMIT_WRITE_API=${TEMPORAL_PERMIT_WRITE_API}
    ports:
      - '${TEMPORAL_WEB_PORT}:8088'
    depends_on:
      - temporal

  # Application Worker
  worker:
    build:
      context: .
      dockerfile: Dockerfile
      target: worker
    container_name: orderflow-worker
    environment:
      - TEMPORAL_HOST_PORT=${TEMPORAL_HOST_PORT}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    depends_on:
      temporal:
        condition: service_healthy
      postgres:
        condition: service_healthy
    restart: unless-stopped

  # Application API
  api:
    build:
      context: .
      dockerfile: Dockerfile
      target: api
    container_name: orderflow-api
    environment:
      - TEMPORAL_HOST_PORT=${TEMPORAL_HOST_PORT}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - API_PORT=${API_PORT}
    ports:
      - '${API_PORT}:8080'
    depends_on:
      temporal:
        condition: service_healthy
      postgres:
        condition: service_healthy
      worker:
        condition: service_started
    restart: unless-stopped

volumes:
  postgres_data:
